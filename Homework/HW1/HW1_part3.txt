CSE426 Pattern Recognition
Yi Luo (yil712)

>1. If we selected the black-area of the comprehensive image as the only feature,
we could get the following results:

a) The best decision rule I found:
	if (black-area <= 43) decide 'c'; else decide 'e';

b) The three numbers from question 5 was:
	A = 43;
	B = 19;
	C = 21;
	
c) A brief discussion of reasons for the difference in the number of misclassification
B and C:
	B and C were different because the objective was to get the minimum average error rate
	rather than getting equal misclassification of B and C. To find the threshold, we 
	traversed the x-axis of the histogram and calculated the error rate for 'c' and 'e' 
	respectively then we acquired the average error rate. It was possible that when the 
	average error rate reached the minimum number while B != C. In this experiment, the 
	minimum average error rate was 20% and B = 19, C = 21.

d) The main part of my program source:
	a. I had a function readLetterImages(filename) to read all letter images
	from the file to my data structure. I used L, an array of 2-dimensional matrices,
	to save letter images. Each matrix was in the size of 12*12. An array of heights and
	weights were also recorded for future use.
	b. Then in the HW1_part3.m file, I went over all matrices and summed the black pixels 
	for each letter image. Based on the feature vector, I got the required histogram.
	c. To obtain the threshold, I tried all possible values on the x-axis. For each trial
	T, I calculated the average error rate and compared it to the recorded minimum result.
	In this way I finally got the desired threshold with the smallest average error rate.
	
	Please check the source code at the bottom of this file. (readLetterImages.m, HW1_part3_newF.m)
	
>2. From part1, we found that the minimum average error rate was 20%. In this part we chose
another feature to improve the classification performance. We observed that the most obvious
difference between 'c' and 'e' is the short line in the middle height. Therefore, we could 
use the black-area around the middle part of the image as the feature. We firstly got the
middle height mid = height / 2. Then we summed the black pixels within (h >= mid - 1) && (h <= mid + 1).
The experiment result was as follows:

a) The best decision rule I found:
	if (black-area-around-middle <= 10) decide 'c'; else decide 'e';

b) The three numbers from question 5 is:
	A = 10;
	B = 3;
	C = 3;
	
c) A brief discussion of reasons for the difference in the number of B and C:
	B and C were different because the objective was to get the minimum average error rate
	rather than getting equal misclassification of B and C. To find the threshold, we 
	traversed the x-axis of the histogram and calculated the error rate for 'c' and 'e' 
	respectively then we acquired the average error rate. It was possible that when the 
	average error rate reached the minimum number while B != C. Of course, it was also possible
	that B == C. In this experiment, B = C = 3.
	
d) The main part of my program source (similar to d in part 1):
	a. I reused the function readLetterImages(filename) to read all letter images
	from the file to my data structure. I used L, an array of 2-dimensional matrices,
	to save letter images. Each matrix was in the size of 12*12. An array of heights and
	weights were also recorded for future use.
	b. Then in the HW1_part3_newF.m file, I went over all matrices and summed the black pixels 
	within (h >= mid - 1) && (h <= mid + 1) for each letter image. Based on the feature vector, 
	I got the required histogram.
	c. To obtain the threshold, I tried all possible values on the x-axis. For each trial
	T, I calculated the average error rate and compared it to the recorded minimum result.
	In this way I finally got the desired threshold with the smallest average error rate.

	Please check the source code at the bottom of this file. (HW1_part3_newF.m)
	
------------
@source code
@Yi Luo
------------
--->readLetterImages.m
	function [L, h, w, F] = readLetterImages(filename)

	fid1 = fopen(filename);

	size = 100;
	numOfL = 1;
	L(1:size,:,:) = 0; % all letter images
	while ~feof(fid1)
		line = fgetl(fid1);
		if (line(1) == 'C')
			para = regexp(line,'\s','split');
			height = para{2};
			weight = para{3};
			h(numOfL) = str2num(height(2:end)); % to get the height of the matrix
			w(numOfL) = str2num(weight(2:end)); % to get the weight of the matrix
		end
		
		for i = 1:h(numOfL)
			line = fgetl(fid1);
			for j = 1:w(numOfL)
				if (line(j) == '.')
					L(numOfL, i, j) = 0;
				else
					L(numOfL, i, j) = 1;
				end
			end
		end
		
		numOfL = numOfL + 1;
	end

	F(1:size, 1:3) = 0;
	for n = 1:size
		mid = h(n) / 2;
		for i = 1:h(n)
			for j = 1:w(n)
				if (L(n, i, j) == 0)
					F(n, 1) = F(n, 1) + 1; % white area
				else
					F(n, 2) = F(n, 2) + 1; % black area
				end
				if ((i >= mid - 1) && (i <= mid + 1) && (L(n, i, j) == 1))
					F(n, 3) = F(n, 3) + 1; % black pixels in the middle area
				end
			end
		end
	end

	end

	
--->HW1_part3.m
	[L1, h1, w1, F1] = readLetterImages('HW1_c.txt');
	[L2, h2, w2, F2] = readLetterImages('HW1_e.txt');

	dimension = 100;

	H1(1:dimension) = 0;
	Feature1 = F1(:, 2);
	for i = 1:dimension
		H1(Feature1(i)) = H1(Feature1(i)) + 1;
	end

	H2(1:dimension) = 0;
	Feature2 = F2(:, 2);
	for i = 1:dimension
		H2(Feature2(i)) = H2(Feature2(i)) + 1;
	end

	figure(1);
	hist(Feature1);

	hold on;
	hist(Feature2);
	hold off;

	min = 1;
	for t = 1:dimension-1
		t_c = sum(H1(1:t));
		f_c = sum(H1(t + 1: end));
		t_e = sum(H2(t + 1: end));
		f_e = sum(H2(1:t));
		precision = ((f_c / (t_c + f_c)) + (f_e / (t_e + f_e))) * 0.5;
		if (precision < min) 
			min = precision; % average error rate
			T = t; % boundary
		end
	end

	t = T;
	t_c = sum(H1(1:t));
	f_c = sum(H1(t + 1: end));
	t_e = sum(H2(t + 1: end));
	f_e = sum(H2(1:t));
	
	
--->HW1_part3_newF.m
	[L1, h1, w1, F1] = readLetterImages('HW1_c.txt');
	[L2, h2, w2, F2] = readLetterImages('HW1_e.txt');

	dimension = 100;

	H1(1:dimension) = 0;
	Feature1 = F1(:, 3);
	for i = 1:dimension
		H1(Feature1(i)) = H1(Feature1(i)) + 1;
	end

	H2(1:dimension) = 0;
	Feature2 = F2(:, 3);
	for i = 1:dimension
		H2(Feature2(i)) = H2(Feature2(i)) + 1;
	end

	figure(2);
	hist(Feature1);

	hold on;
	hist(Feature2);
	xlim([0 30]);
	hold off;

	min = 1;
	for t = 1:dimension-1
		t_c = sum(H1(1:t));
		f_c = sum(H1(t + 1: end));
		t_e = sum(H2(t + 1: end));
		f_e = sum(H2(1:t));
		precision = ((f_c / (t_c + f_c)) + (f_e / (t_e + f_e))) * 0.5;
		if (precision < min) 
			min = precision; % average error rate
			T = t; % boundary
		end
	end

	t = T;
	t_c = sum(H1(1:t));
	f_c = sum(H1(t + 1: end));
	t_e = sum(H2(t + 1: end));
	f_e = sum(H2(1:t));